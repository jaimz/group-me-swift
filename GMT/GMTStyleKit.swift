//
//  GMTStyleKit.swift
//  GMT
//
//  Created by James O'Brien on 09/08/2016.
//  Copyright (c) 2016 CompanyName. All rights reserved.
//
//  Generated by PaintCode (www.paintcodeapp.com)
//



import UIKit

public class GMTStyleKit : NSObject {

    //// Cache

    private struct Cache {
        static let black20: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 0.200)
        static let blueStart: UIColor = UIColor(red: 0.320, green: 0.560, blue: 0.760, alpha: 1.000)
        static let blueEnd: UIColor = UIColor(red: 0.160, green: 0.320, blue: 0.480, alpha: 1.000)
        static let textBlue: UIColor = UIColor(red: 0.365, green: 0.518, blue: 0.659, alpha: 1.000)
        static let myMessageForeground: UIColor = UIColor(red: 0.365, green: 0.518, blue: 0.659, alpha: 0.800)
        static let myMessageNameForeground: UIColor = UIColor(red: 0.365, green: 0.518, blue: 0.659, alpha: 0.600)
        static let messageForeground: UIColor = UIColor(red: 0.325, green: 0.325, blue: 0.290, alpha: 0.800)
        static let messageNameForeground: UIColor = UIColor(red: 0.325, green: 0.325, blue: 0.290, alpha: 0.600)
        static let subtleShadow: NSShadow = NSShadow(color: GMTStyleKit.black20, offset: CGSizeMake(0.1, 2.1), blurRadius: 3)
        static let messageBoxShadow: NSShadow = NSShadow(color: UIColor.blackColor().colorWithAlphaComponent(0.2), offset: CGSizeMake(0.1, 2.1), blurRadius: 2)
        static var imageOfCreateGroup: UIImage?
        static var createGroupTargets: [AnyObject]?
        static var imageOfAddMediaButton: UIImage?
        static var addMediaButtonTargets: [AnyObject]?
        static var imageOfSendButtonIcon: UIImage?
        static var sendButtonIconTargets: [AnyObject]?
        static var imageOfCloseMediaButton: UIImage?
        static var closeMediaButtonTargets: [AnyObject]?
        static var imageOfBackChevron: UIImage?
        static var backChevronTargets: [AnyObject]?
    }

    //// Colors

    public class var black20: UIColor { return Cache.black20 }
    public class var blueStart: UIColor { return Cache.blueStart }
    public class var blueEnd: UIColor { return Cache.blueEnd }
    public class var textBlue: UIColor { return Cache.textBlue }
    public class var myMessageForeground: UIColor { return Cache.myMessageForeground }
    public class var myMessageNameForeground: UIColor { return Cache.myMessageNameForeground }
    public class var messageForeground: UIColor { return Cache.messageForeground }
    public class var messageNameForeground: UIColor { return Cache.messageNameForeground }

    //// Shadows

    public class var subtleShadow: NSShadow { return Cache.subtleShadow }
    public class var messageBoxShadow: NSShadow { return Cache.messageBoxShadow }

    //// Drawing Methods

    public class func drawAvatar(initials initials: String = "GMT", avatarSize: CGSize = CGSizeMake(54, 54)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()


        //// Gradient Declarations
        let gradient = CGGradientCreateWithColors(CGColorSpaceCreateDeviceRGB(), [GMTStyleKit.blueStart.CGColor, GMTStyleKit.blueEnd.CGColor], [0, 1])!

        //// Variable Declarations
        let fontSize: CGFloat = avatarSize.height / 2.0 - avatarSize.height / 6.0

        //// Rectangle Drawing
        let rectangleRect = CGRectMake(0, 0, avatarSize.width, avatarSize.height)
        let rectanglePath = UIBezierPath(rect: rectangleRect)
        CGContextSaveGState(context)
        rectanglePath.addClip()
        CGContextDrawLinearGradient(context, gradient,
            CGPointMake(rectangleRect.midX, rectangleRect.minY),
            CGPointMake(rectangleRect.midX, rectangleRect.maxY),
            CGGradientDrawingOptions())
        CGContextRestoreGState(context)


        //// Text Drawing
        let textRect = CGRectMake(0, 0, avatarSize.width, avatarSize.height)
        let textStyle = NSParagraphStyle.defaultParagraphStyle().mutableCopy() as! NSMutableParagraphStyle
        textStyle.alignment = .Center

        let textFontAttributes = [NSFontAttributeName: UIFont.systemFontOfSize(fontSize), NSForegroundColorAttributeName: UIColor.whiteColor(), NSParagraphStyleAttributeName: textStyle]

        let textTextHeight: CGFloat = NSString(string: initials).boundingRectWithSize(CGSizeMake(textRect.width, CGFloat.infinity), options: NSStringDrawingOptions.UsesLineFragmentOrigin, attributes: textFontAttributes, context: nil).size.height
        CGContextSaveGState(context)
        CGContextClipToRect(context, textRect);
        NSString(string: initials).drawInRect(CGRectMake(textRect.minX, textRect.minY + (textRect.height - textTextHeight) / 2, textRect.width, textTextHeight), withAttributes: textFontAttributes)
        CGContextRestoreGState(context)
    }

    public class func drawCreateGroup() {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let fillColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)
        let shadowTint = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)
        let strokeColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)

        //// Shadow Declarations
        let shadow = NSShadow(color: shadowTint.colorWithAlphaComponent(0.2 * CGColorGetAlpha(shadowTint.CGColor)), offset: CGSizeMake(166.1, 2.1), blurRadius: 4)

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.moveToPoint(CGPointMake(-136.33, 35.43))
        bezierPath.addLineToPoint(CGPointMake(-120, 35.43))
        bezierPath.addCurveToPoint(CGPointMake(-117, 32.43), controlPoint1: CGPointMake(-118.35, 35.43), controlPoint2: CGPointMake(-117, 34.09))
        bezierPath.addLineToPoint(CGPointMake(-117, 11))
        bezierPath.addCurveToPoint(CGPointMake(-120, 8), controlPoint1: CGPointMake(-117, 9.34), controlPoint2: CGPointMake(-118.35, 8))
        bezierPath.addLineToPoint(CGPointMake(-159, 8))
        bezierPath.addCurveToPoint(CGPointMake(-162, 11), controlPoint1: CGPointMake(-160.65, 8), controlPoint2: CGPointMake(-162, 9.34))
        bezierPath.addLineToPoint(CGPointMake(-162, 32.43))
        bezierPath.addCurveToPoint(CGPointMake(-159, 35.43), controlPoint1: CGPointMake(-162, 34.09), controlPoint2: CGPointMake(-160.65, 35.43))
        bezierPath.addLineToPoint(CGPointMake(-146.42, 35.43))
        bezierPath.addLineToPoint(CGPointMake(-146.42, 44))
        bezierPath.addLineToPoint(CGPointMake(-136.33, 35.43))
        bezierPath.closePath()
        bezierPath.usesEvenOddFillRule = true;

        CGContextSaveGState(context)
        CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, (shadow.shadowColor as! UIColor).CGColor)
        fillColor.setFill()
        bezierPath.fill()
        CGContextRestoreGState(context)



        //// Group
        CGContextSaveGState(context)
        CGContextBeginTransparencyLayer(context, nil)

        //// Clip Clip 2
        let clip2Path = UIBezierPath()
        clip2Path.moveToPoint(CGPointMake(-16.5, -12.5))
        clip2Path.addLineToPoint(CGPointMake(69.5, -12.5))
        clip2Path.addLineToPoint(CGPointMake(69.5, 65.08))
        clip2Path.addLineToPoint(CGPointMake(-16.5, 65.08))
        clip2Path.addLineToPoint(CGPointMake(-16.5, -12.5))
        clip2Path.closePath()
        clip2Path.moveToPoint(CGPointMake(29.67, 35.93))
        clip2Path.addLineToPoint(CGPointMake(46, 35.93))
        clip2Path.addCurveToPoint(CGPointMake(49.5, 32.43), controlPoint1: CGPointMake(47.93, 35.93), controlPoint2: CGPointMake(49.5, 34.36))
        clip2Path.addLineToPoint(CGPointMake(49.5, 11))
        clip2Path.addCurveToPoint(CGPointMake(46, 7.5), controlPoint1: CGPointMake(49.5, 9.07), controlPoint2: CGPointMake(47.93, 7.5))
        clip2Path.addLineToPoint(CGPointMake(7, 7.5))
        clip2Path.addCurveToPoint(CGPointMake(3.5, 11), controlPoint1: CGPointMake(5.07, 7.5), controlPoint2: CGPointMake(3.5, 9.07))
        clip2Path.addLineToPoint(CGPointMake(3.5, 32.43))
        clip2Path.addCurveToPoint(CGPointMake(7, 35.93), controlPoint1: CGPointMake(3.5, 34.36), controlPoint2: CGPointMake(5.07, 35.93))
        clip2Path.addLineToPoint(CGPointMake(19.58, 35.93))
        clip2Path.addLineToPoint(CGPointMake(19.08, 35.43))
        clip2Path.addLineToPoint(CGPointMake(19.08, 44))
        clip2Path.addLineToPoint(CGPointMake(19.08, 45.08))
        clip2Path.addLineToPoint(CGPointMake(19.9, 44.38))
        clip2Path.addLineToPoint(CGPointMake(30, 35.81))
        clip2Path.addLineToPoint(CGPointMake(29.67, 35.93))
        clip2Path.closePath()
        clip2Path.moveToPoint(CGPointMake(29.67, 34.93))
        clip2Path.addLineToPoint(CGPointMake(29.49, 34.93))
        clip2Path.addLineToPoint(CGPointMake(29.35, 35.05))
        clip2Path.addLineToPoint(CGPointMake(19.25, 43.62))
        clip2Path.addLineToPoint(CGPointMake(20.08, 44))
        clip2Path.addLineToPoint(CGPointMake(20.08, 35.43))
        clip2Path.addLineToPoint(CGPointMake(20.08, 34.93))
        clip2Path.addLineToPoint(CGPointMake(19.58, 34.93))
        clip2Path.addLineToPoint(CGPointMake(7, 34.93))
        clip2Path.addCurveToPoint(CGPointMake(4.5, 32.43), controlPoint1: CGPointMake(5.62, 34.93), controlPoint2: CGPointMake(4.5, 33.81))
        clip2Path.addLineToPoint(CGPointMake(4.5, 11))
        clip2Path.addCurveToPoint(CGPointMake(7, 8.5), controlPoint1: CGPointMake(4.5, 9.62), controlPoint2: CGPointMake(5.62, 8.5))
        clip2Path.addLineToPoint(CGPointMake(46, 8.5))
        clip2Path.addCurveToPoint(CGPointMake(48.5, 11), controlPoint1: CGPointMake(47.38, 8.5), controlPoint2: CGPointMake(48.5, 9.62))
        clip2Path.addLineToPoint(CGPointMake(48.5, 32.43))
        clip2Path.addCurveToPoint(CGPointMake(46, 34.93), controlPoint1: CGPointMake(48.5, 33.81), controlPoint2: CGPointMake(47.38, 34.93))
        clip2Path.addLineToPoint(CGPointMake(29.67, 34.93))
        clip2Path.closePath()
        clip2Path.usesEvenOddFillRule = true;

        clip2Path.addClip()


        //// Group 2
        CGContextSaveGState(context)
        CGContextBeginTransparencyLayer(context, nil)

        //// Clip Clip
        let clipPath = UIBezierPath()
        clipPath.moveToPoint(CGPointMake(29.67, 35.43))
        clipPath.addLineToPoint(CGPointMake(46, 35.43))
        clipPath.addCurveToPoint(CGPointMake(49, 32.43), controlPoint1: CGPointMake(47.65, 35.43), controlPoint2: CGPointMake(49, 34.09))
        clipPath.addLineToPoint(CGPointMake(49, 11))
        clipPath.addCurveToPoint(CGPointMake(46, 8), controlPoint1: CGPointMake(49, 9.34), controlPoint2: CGPointMake(47.65, 8))
        clipPath.addLineToPoint(CGPointMake(7, 8))
        clipPath.addCurveToPoint(CGPointMake(4, 11), controlPoint1: CGPointMake(5.35, 8), controlPoint2: CGPointMake(4, 9.34))
        clipPath.addLineToPoint(CGPointMake(4, 32.43))
        clipPath.addCurveToPoint(CGPointMake(7, 35.43), controlPoint1: CGPointMake(4, 34.09), controlPoint2: CGPointMake(5.35, 35.43))
        clipPath.addLineToPoint(CGPointMake(19.58, 35.43))
        clipPath.addLineToPoint(CGPointMake(19.58, 44))
        clipPath.addLineToPoint(CGPointMake(29.67, 35.43))
        clipPath.closePath()
        clipPath.usesEvenOddFillRule = true;

        clipPath.addClip()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.moveToPoint(CGPointMake(29.67, 35.43))
        bezier2Path.addLineToPoint(CGPointMake(46, 35.43))
        bezier2Path.addCurveToPoint(CGPointMake(49, 32.43), controlPoint1: CGPointMake(47.65, 35.43), controlPoint2: CGPointMake(49, 34.09))
        bezier2Path.addLineToPoint(CGPointMake(49, 11))
        bezier2Path.addCurveToPoint(CGPointMake(46, 8), controlPoint1: CGPointMake(49, 9.34), controlPoint2: CGPointMake(47.65, 8))
        bezier2Path.addLineToPoint(CGPointMake(7, 8))
        bezier2Path.addCurveToPoint(CGPointMake(4, 11), controlPoint1: CGPointMake(5.35, 8), controlPoint2: CGPointMake(4, 9.34))
        bezier2Path.addLineToPoint(CGPointMake(4, 32.43))
        bezier2Path.addCurveToPoint(CGPointMake(7, 35.43), controlPoint1: CGPointMake(4, 34.09), controlPoint2: CGPointMake(5.35, 35.43))
        bezier2Path.addLineToPoint(CGPointMake(19.58, 35.43))
        bezier2Path.addLineToPoint(CGPointMake(19.58, 44))
        bezier2Path.addLineToPoint(CGPointMake(29.67, 35.43))
        bezier2Path.closePath()
        GMTStyleKit.textBlue.setFill()
        bezier2Path.fill()


        CGContextEndTransparencyLayer(context)
        CGContextRestoreGState(context)


        CGContextEndTransparencyLayer(context)
        CGContextRestoreGState(context)


        //// Group 3
        CGContextSaveGState(context)
        CGContextBeginTransparencyLayer(context, nil)

        //// Clip Clip 3
        let clip3Path = UIBezierPath()
        clip3Path.moveToPoint(CGPointMake(29.67, 35.43))
        clip3Path.addLineToPoint(CGPointMake(46, 35.43))
        clip3Path.addCurveToPoint(CGPointMake(49, 32.43), controlPoint1: CGPointMake(47.65, 35.43), controlPoint2: CGPointMake(49, 34.09))
        clip3Path.addLineToPoint(CGPointMake(49, 11))
        clip3Path.addCurveToPoint(CGPointMake(46, 8), controlPoint1: CGPointMake(49, 9.34), controlPoint2: CGPointMake(47.65, 8))
        clip3Path.addLineToPoint(CGPointMake(7, 8))
        clip3Path.addCurveToPoint(CGPointMake(4, 11), controlPoint1: CGPointMake(5.35, 8), controlPoint2: CGPointMake(4, 9.34))
        clip3Path.addLineToPoint(CGPointMake(4, 32.43))
        clip3Path.addCurveToPoint(CGPointMake(7, 35.43), controlPoint1: CGPointMake(4, 34.09), controlPoint2: CGPointMake(5.35, 35.43))
        clip3Path.addLineToPoint(CGPointMake(19.58, 35.43))
        clip3Path.addLineToPoint(CGPointMake(19.58, 44))
        clip3Path.addLineToPoint(CGPointMake(29.67, 35.43))
        clip3Path.closePath()
        clip3Path.usesEvenOddFillRule = true;

        clip3Path.addClip()


        //// Bezier 5 Drawing
        let bezier5Path = UIBezierPath()
        bezier5Path.moveToPoint(CGPointMake(29.67, 35.43))
        bezier5Path.addLineToPoint(CGPointMake(46, 35.43))
        bezier5Path.addCurveToPoint(CGPointMake(49, 32.43), controlPoint1: CGPointMake(47.65, 35.43), controlPoint2: CGPointMake(49, 34.09))
        bezier5Path.addLineToPoint(CGPointMake(49, 11))
        bezier5Path.addCurveToPoint(CGPointMake(46, 8), controlPoint1: CGPointMake(49, 9.34), controlPoint2: CGPointMake(47.65, 8))
        bezier5Path.addLineToPoint(CGPointMake(7, 8))
        bezier5Path.addCurveToPoint(CGPointMake(4, 11), controlPoint1: CGPointMake(5.35, 8), controlPoint2: CGPointMake(4, 9.34))
        bezier5Path.addLineToPoint(CGPointMake(4, 32.43))
        bezier5Path.addCurveToPoint(CGPointMake(7, 35.43), controlPoint1: CGPointMake(4, 34.09), controlPoint2: CGPointMake(5.35, 35.43))
        bezier5Path.addLineToPoint(CGPointMake(19.58, 35.43))
        bezier5Path.addLineToPoint(CGPointMake(19.58, 44))
        bezier5Path.addLineToPoint(CGPointMake(29.67, 35.43))
        bezier5Path.closePath()
        strokeColor.setStroke()
        bezier5Path.lineWidth = 2
        bezier5Path.stroke()


        CGContextEndTransparencyLayer(context)
        CGContextRestoreGState(context)


        //// Bezier 7 Drawing
        let bezier7Path = UIBezierPath()
        bezier7Path.moveToPoint(CGPointMake(-133.33, 32.43))
        bezier7Path.addLineToPoint(CGPointMake(-117, 32.43))
        bezier7Path.addCurveToPoint(CGPointMake(-114, 29.43), controlPoint1: CGPointMake(-115.35, 32.43), controlPoint2: CGPointMake(-114, 31.09))
        bezier7Path.addLineToPoint(CGPointMake(-114, 8))
        bezier7Path.addCurveToPoint(CGPointMake(-117, 5), controlPoint1: CGPointMake(-114, 6.34), controlPoint2: CGPointMake(-115.35, 5))
        bezier7Path.addLineToPoint(CGPointMake(-156, 5))
        bezier7Path.addCurveToPoint(CGPointMake(-159, 8), controlPoint1: CGPointMake(-157.65, 5), controlPoint2: CGPointMake(-159, 6.34))
        bezier7Path.addLineToPoint(CGPointMake(-159, 29.43))
        bezier7Path.addCurveToPoint(CGPointMake(-156, 32.43), controlPoint1: CGPointMake(-159, 31.09), controlPoint2: CGPointMake(-157.65, 32.43))
        bezier7Path.addLineToPoint(CGPointMake(-143.42, 32.43))
        bezier7Path.addLineToPoint(CGPointMake(-143.42, 41))
        bezier7Path.addLineToPoint(CGPointMake(-133.33, 32.43))
        bezier7Path.closePath()
        bezier7Path.usesEvenOddFillRule = true;

        CGContextSaveGState(context)
        CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, (shadow.shadowColor as! UIColor).CGColor)
        fillColor.setFill()
        bezier7Path.fill()
        CGContextRestoreGState(context)



        //// Group 4
        CGContextSaveGState(context)
        CGContextBeginTransparencyLayer(context, nil)

        //// Clip Clip 5
        let clip5Path = UIBezierPath()
        clip5Path.moveToPoint(CGPointMake(-13.5, -15.5))
        clip5Path.addLineToPoint(CGPointMake(72.5, -15.5))
        clip5Path.addLineToPoint(CGPointMake(72.5, 62.08))
        clip5Path.addLineToPoint(CGPointMake(-13.5, 62.08))
        clip5Path.addLineToPoint(CGPointMake(-13.5, -15.5))
        clip5Path.closePath()
        clip5Path.moveToPoint(CGPointMake(32.67, 32.93))
        clip5Path.addLineToPoint(CGPointMake(49, 32.93))
        clip5Path.addCurveToPoint(CGPointMake(52.5, 29.43), controlPoint1: CGPointMake(50.93, 32.93), controlPoint2: CGPointMake(52.5, 31.36))
        clip5Path.addLineToPoint(CGPointMake(52.5, 8))
        clip5Path.addCurveToPoint(CGPointMake(49, 4.5), controlPoint1: CGPointMake(52.5, 6.07), controlPoint2: CGPointMake(50.93, 4.5))
        clip5Path.addLineToPoint(CGPointMake(10, 4.5))
        clip5Path.addCurveToPoint(CGPointMake(6.5, 8), controlPoint1: CGPointMake(8.07, 4.5), controlPoint2: CGPointMake(6.5, 6.07))
        clip5Path.addLineToPoint(CGPointMake(6.5, 29.43))
        clip5Path.addCurveToPoint(CGPointMake(10, 32.93), controlPoint1: CGPointMake(6.5, 31.36), controlPoint2: CGPointMake(8.07, 32.93))
        clip5Path.addLineToPoint(CGPointMake(22.58, 32.93))
        clip5Path.addLineToPoint(CGPointMake(22.08, 32.43))
        clip5Path.addLineToPoint(CGPointMake(22.08, 41))
        clip5Path.addLineToPoint(CGPointMake(22.08, 42.08))
        clip5Path.addLineToPoint(CGPointMake(22.9, 41.38))
        clip5Path.addLineToPoint(CGPointMake(33, 32.81))
        clip5Path.addLineToPoint(CGPointMake(32.67, 32.93))
        clip5Path.closePath()
        clip5Path.moveToPoint(CGPointMake(32.67, 31.93))
        clip5Path.addLineToPoint(CGPointMake(32.49, 31.93))
        clip5Path.addLineToPoint(CGPointMake(32.35, 32.05))
        clip5Path.addLineToPoint(CGPointMake(22.25, 40.62))
        clip5Path.addLineToPoint(CGPointMake(23.08, 41))
        clip5Path.addLineToPoint(CGPointMake(23.08, 32.43))
        clip5Path.addLineToPoint(CGPointMake(23.08, 31.93))
        clip5Path.addLineToPoint(CGPointMake(22.58, 31.93))
        clip5Path.addLineToPoint(CGPointMake(10, 31.93))
        clip5Path.addCurveToPoint(CGPointMake(7.5, 29.43), controlPoint1: CGPointMake(8.62, 31.93), controlPoint2: CGPointMake(7.5, 30.81))
        clip5Path.addLineToPoint(CGPointMake(7.5, 8))
        clip5Path.addCurveToPoint(CGPointMake(10, 5.5), controlPoint1: CGPointMake(7.5, 6.62), controlPoint2: CGPointMake(8.62, 5.5))
        clip5Path.addLineToPoint(CGPointMake(49, 5.5))
        clip5Path.addCurveToPoint(CGPointMake(51.5, 8), controlPoint1: CGPointMake(50.38, 5.5), controlPoint2: CGPointMake(51.5, 6.62))
        clip5Path.addLineToPoint(CGPointMake(51.5, 29.43))
        clip5Path.addCurveToPoint(CGPointMake(49, 31.93), controlPoint1: CGPointMake(51.5, 30.81), controlPoint2: CGPointMake(50.38, 31.93))
        clip5Path.addLineToPoint(CGPointMake(32.67, 31.93))
        clip5Path.closePath()
        clip5Path.usesEvenOddFillRule = true;

        clip5Path.addClip()


        //// Group 5
        CGContextSaveGState(context)
        CGContextBeginTransparencyLayer(context, nil)

        //// Clip Clip 4
        let clip4Path = UIBezierPath()
        clip4Path.moveToPoint(CGPointMake(32.67, 32.43))
        clip4Path.addLineToPoint(CGPointMake(49, 32.43))
        clip4Path.addCurveToPoint(CGPointMake(52, 29.43), controlPoint1: CGPointMake(50.65, 32.43), controlPoint2: CGPointMake(52, 31.09))
        clip4Path.addLineToPoint(CGPointMake(52, 8))
        clip4Path.addCurveToPoint(CGPointMake(49, 5), controlPoint1: CGPointMake(52, 6.34), controlPoint2: CGPointMake(50.65, 5))
        clip4Path.addLineToPoint(CGPointMake(10, 5))
        clip4Path.addCurveToPoint(CGPointMake(7, 8), controlPoint1: CGPointMake(8.35, 5), controlPoint2: CGPointMake(7, 6.34))
        clip4Path.addLineToPoint(CGPointMake(7, 29.43))
        clip4Path.addCurveToPoint(CGPointMake(10, 32.43), controlPoint1: CGPointMake(7, 31.09), controlPoint2: CGPointMake(8.35, 32.43))
        clip4Path.addLineToPoint(CGPointMake(22.58, 32.43))
        clip4Path.addLineToPoint(CGPointMake(22.58, 41))
        clip4Path.addLineToPoint(CGPointMake(32.67, 32.43))
        clip4Path.closePath()
        clip4Path.usesEvenOddFillRule = true;

        clip4Path.addClip()


        //// Bezier 8 Drawing
        let bezier8Path = UIBezierPath()
        bezier8Path.moveToPoint(CGPointMake(32.67, 32.43))
        bezier8Path.addLineToPoint(CGPointMake(49, 32.43))
        bezier8Path.addCurveToPoint(CGPointMake(52, 29.43), controlPoint1: CGPointMake(50.65, 32.43), controlPoint2: CGPointMake(52, 31.09))
        bezier8Path.addLineToPoint(CGPointMake(52, 8))
        bezier8Path.addCurveToPoint(CGPointMake(49, 5), controlPoint1: CGPointMake(52, 6.34), controlPoint2: CGPointMake(50.65, 5))
        bezier8Path.addLineToPoint(CGPointMake(10, 5))
        bezier8Path.addCurveToPoint(CGPointMake(7, 8), controlPoint1: CGPointMake(8.35, 5), controlPoint2: CGPointMake(7, 6.34))
        bezier8Path.addLineToPoint(CGPointMake(7, 29.43))
        bezier8Path.addCurveToPoint(CGPointMake(10, 32.43), controlPoint1: CGPointMake(7, 31.09), controlPoint2: CGPointMake(8.35, 32.43))
        bezier8Path.addLineToPoint(CGPointMake(22.58, 32.43))
        bezier8Path.addLineToPoint(CGPointMake(22.58, 41))
        bezier8Path.addLineToPoint(CGPointMake(32.67, 32.43))
        bezier8Path.closePath()
        GMTStyleKit.textBlue.setFill()
        bezier8Path.fill()


        CGContextEndTransparencyLayer(context)
        CGContextRestoreGState(context)


        CGContextEndTransparencyLayer(context)
        CGContextRestoreGState(context)


        //// Group 6
        CGContextSaveGState(context)
        CGContextBeginTransparencyLayer(context, nil)

        //// Clip Clip 6
        let clip6Path = UIBezierPath()
        clip6Path.moveToPoint(CGPointMake(32.67, 32.43))
        clip6Path.addLineToPoint(CGPointMake(49, 32.43))
        clip6Path.addCurveToPoint(CGPointMake(52, 29.43), controlPoint1: CGPointMake(50.65, 32.43), controlPoint2: CGPointMake(52, 31.09))
        clip6Path.addLineToPoint(CGPointMake(52, 8))
        clip6Path.addCurveToPoint(CGPointMake(49, 5), controlPoint1: CGPointMake(52, 6.34), controlPoint2: CGPointMake(50.65, 5))
        clip6Path.addLineToPoint(CGPointMake(10, 5))
        clip6Path.addCurveToPoint(CGPointMake(7, 8), controlPoint1: CGPointMake(8.35, 5), controlPoint2: CGPointMake(7, 6.34))
        clip6Path.addLineToPoint(CGPointMake(7, 29.43))
        clip6Path.addCurveToPoint(CGPointMake(10, 32.43), controlPoint1: CGPointMake(7, 31.09), controlPoint2: CGPointMake(8.35, 32.43))
        clip6Path.addLineToPoint(CGPointMake(22.58, 32.43))
        clip6Path.addLineToPoint(CGPointMake(22.58, 41))
        clip6Path.addLineToPoint(CGPointMake(32.67, 32.43))
        clip6Path.closePath()
        clip6Path.usesEvenOddFillRule = true;

        clip6Path.addClip()


        //// Bezier 11 Drawing
        let bezier11Path = UIBezierPath()
        bezier11Path.moveToPoint(CGPointMake(32.67, 32.43))
        bezier11Path.addLineToPoint(CGPointMake(49, 32.43))
        bezier11Path.addCurveToPoint(CGPointMake(52, 29.43), controlPoint1: CGPointMake(50.65, 32.43), controlPoint2: CGPointMake(52, 31.09))
        bezier11Path.addLineToPoint(CGPointMake(52, 8))
        bezier11Path.addCurveToPoint(CGPointMake(49, 5), controlPoint1: CGPointMake(52, 6.34), controlPoint2: CGPointMake(50.65, 5))
        bezier11Path.addLineToPoint(CGPointMake(10, 5))
        bezier11Path.addCurveToPoint(CGPointMake(7, 8), controlPoint1: CGPointMake(8.35, 5), controlPoint2: CGPointMake(7, 6.34))
        bezier11Path.addLineToPoint(CGPointMake(7, 29.43))
        bezier11Path.addCurveToPoint(CGPointMake(10, 32.43), controlPoint1: CGPointMake(7, 31.09), controlPoint2: CGPointMake(8.35, 32.43))
        bezier11Path.addLineToPoint(CGPointMake(22.58, 32.43))
        bezier11Path.addLineToPoint(CGPointMake(22.58, 41))
        bezier11Path.addLineToPoint(CGPointMake(32.67, 32.43))
        bezier11Path.closePath()
        strokeColor.setStroke()
        bezier11Path.lineWidth = 2
        bezier11Path.stroke()


        CGContextEndTransparencyLayer(context)
        CGContextRestoreGState(context)


        //// Bezier 13 Drawing
        let bezier13Path = UIBezierPath()
        bezier13Path.moveToPoint(CGPointMake(-130.33, 29.43))
        bezier13Path.addLineToPoint(CGPointMake(-114, 29.43))
        bezier13Path.addCurveToPoint(CGPointMake(-111, 26.43), controlPoint1: CGPointMake(-112.35, 29.43), controlPoint2: CGPointMake(-111, 28.09))
        bezier13Path.addLineToPoint(CGPointMake(-111, 5))
        bezier13Path.addCurveToPoint(CGPointMake(-114, 2), controlPoint1: CGPointMake(-111, 3.34), controlPoint2: CGPointMake(-112.35, 2))
        bezier13Path.addLineToPoint(CGPointMake(-153, 2))
        bezier13Path.addCurveToPoint(CGPointMake(-156, 5), controlPoint1: CGPointMake(-154.65, 2), controlPoint2: CGPointMake(-156, 3.34))
        bezier13Path.addLineToPoint(CGPointMake(-156, 26.43))
        bezier13Path.addCurveToPoint(CGPointMake(-153, 29.43), controlPoint1: CGPointMake(-156, 28.09), controlPoint2: CGPointMake(-154.65, 29.43))
        bezier13Path.addLineToPoint(CGPointMake(-140.42, 29.43))
        bezier13Path.addLineToPoint(CGPointMake(-140.42, 38))
        bezier13Path.addLineToPoint(CGPointMake(-130.33, 29.43))
        bezier13Path.closePath()
        bezier13Path.usesEvenOddFillRule = true;

        CGContextSaveGState(context)
        CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, (shadow.shadowColor as! UIColor).CGColor)
        fillColor.setFill()
        bezier13Path.fill()
        CGContextRestoreGState(context)



        //// Group 7
        CGContextSaveGState(context)
        CGContextBeginTransparencyLayer(context, nil)

        //// Clip Clip 8
        let clip8Path = UIBezierPath()
        clip8Path.moveToPoint(CGPointMake(-10.5, -18.5))
        clip8Path.addLineToPoint(CGPointMake(75.5, -18.5))
        clip8Path.addLineToPoint(CGPointMake(75.5, 59.08))
        clip8Path.addLineToPoint(CGPointMake(-10.5, 59.08))
        clip8Path.addLineToPoint(CGPointMake(-10.5, -18.5))
        clip8Path.closePath()
        clip8Path.moveToPoint(CGPointMake(35.67, 29.93))
        clip8Path.addLineToPoint(CGPointMake(52, 29.93))
        clip8Path.addCurveToPoint(CGPointMake(55.5, 26.43), controlPoint1: CGPointMake(53.93, 29.93), controlPoint2: CGPointMake(55.5, 28.36))
        clip8Path.addLineToPoint(CGPointMake(55.5, 5))
        clip8Path.addCurveToPoint(CGPointMake(52, 1.5), controlPoint1: CGPointMake(55.5, 3.07), controlPoint2: CGPointMake(53.93, 1.5))
        clip8Path.addLineToPoint(CGPointMake(13, 1.5))
        clip8Path.addCurveToPoint(CGPointMake(9.5, 5), controlPoint1: CGPointMake(11.07, 1.5), controlPoint2: CGPointMake(9.5, 3.07))
        clip8Path.addLineToPoint(CGPointMake(9.5, 26.43))
        clip8Path.addCurveToPoint(CGPointMake(13, 29.93), controlPoint1: CGPointMake(9.5, 28.36), controlPoint2: CGPointMake(11.07, 29.93))
        clip8Path.addLineToPoint(CGPointMake(25.58, 29.93))
        clip8Path.addLineToPoint(CGPointMake(25.08, 29.43))
        clip8Path.addLineToPoint(CGPointMake(25.08, 38))
        clip8Path.addLineToPoint(CGPointMake(25.08, 39.08))
        clip8Path.addLineToPoint(CGPointMake(25.9, 38.38))
        clip8Path.addLineToPoint(CGPointMake(36, 29.81))
        clip8Path.addLineToPoint(CGPointMake(35.67, 29.93))
        clip8Path.closePath()
        clip8Path.moveToPoint(CGPointMake(35.67, 28.93))
        clip8Path.addLineToPoint(CGPointMake(35.49, 28.93))
        clip8Path.addLineToPoint(CGPointMake(35.35, 29.05))
        clip8Path.addLineToPoint(CGPointMake(25.25, 37.62))
        clip8Path.addLineToPoint(CGPointMake(26.08, 38))
        clip8Path.addLineToPoint(CGPointMake(26.08, 29.43))
        clip8Path.addLineToPoint(CGPointMake(26.08, 28.93))
        clip8Path.addLineToPoint(CGPointMake(25.58, 28.93))
        clip8Path.addLineToPoint(CGPointMake(13, 28.93))
        clip8Path.addCurveToPoint(CGPointMake(10.5, 26.43), controlPoint1: CGPointMake(11.62, 28.93), controlPoint2: CGPointMake(10.5, 27.81))
        clip8Path.addLineToPoint(CGPointMake(10.5, 5))
        clip8Path.addCurveToPoint(CGPointMake(13, 2.5), controlPoint1: CGPointMake(10.5, 3.62), controlPoint2: CGPointMake(11.62, 2.5))
        clip8Path.addLineToPoint(CGPointMake(52, 2.5))
        clip8Path.addCurveToPoint(CGPointMake(54.5, 5), controlPoint1: CGPointMake(53.38, 2.5), controlPoint2: CGPointMake(54.5, 3.62))
        clip8Path.addLineToPoint(CGPointMake(54.5, 26.43))
        clip8Path.addCurveToPoint(CGPointMake(52, 28.93), controlPoint1: CGPointMake(54.5, 27.81), controlPoint2: CGPointMake(53.38, 28.93))
        clip8Path.addLineToPoint(CGPointMake(35.67, 28.93))
        clip8Path.closePath()
        clip8Path.usesEvenOddFillRule = true;

        clip8Path.addClip()


        //// Group 8
        CGContextSaveGState(context)
        CGContextBeginTransparencyLayer(context, nil)

        //// Clip Clip 7
        let clip7Path = UIBezierPath()
        clip7Path.moveToPoint(CGPointMake(35.67, 29.43))
        clip7Path.addLineToPoint(CGPointMake(52, 29.43))
        clip7Path.addCurveToPoint(CGPointMake(55, 26.43), controlPoint1: CGPointMake(53.65, 29.43), controlPoint2: CGPointMake(55, 28.09))
        clip7Path.addLineToPoint(CGPointMake(55, 5))
        clip7Path.addCurveToPoint(CGPointMake(52, 2), controlPoint1: CGPointMake(55, 3.34), controlPoint2: CGPointMake(53.65, 2))
        clip7Path.addLineToPoint(CGPointMake(13, 2))
        clip7Path.addCurveToPoint(CGPointMake(10, 5), controlPoint1: CGPointMake(11.35, 2), controlPoint2: CGPointMake(10, 3.34))
        clip7Path.addLineToPoint(CGPointMake(10, 26.43))
        clip7Path.addCurveToPoint(CGPointMake(13, 29.43), controlPoint1: CGPointMake(10, 28.09), controlPoint2: CGPointMake(11.35, 29.43))
        clip7Path.addLineToPoint(CGPointMake(25.58, 29.43))
        clip7Path.addLineToPoint(CGPointMake(25.58, 38))
        clip7Path.addLineToPoint(CGPointMake(35.67, 29.43))
        clip7Path.closePath()
        clip7Path.usesEvenOddFillRule = true;

        clip7Path.addClip()


        //// Bezier 14 Drawing
        let bezier14Path = UIBezierPath()
        bezier14Path.moveToPoint(CGPointMake(35.67, 29.43))
        bezier14Path.addLineToPoint(CGPointMake(52, 29.43))
        bezier14Path.addCurveToPoint(CGPointMake(55, 26.43), controlPoint1: CGPointMake(53.65, 29.43), controlPoint2: CGPointMake(55, 28.09))
        bezier14Path.addLineToPoint(CGPointMake(55, 5))
        bezier14Path.addCurveToPoint(CGPointMake(52, 2), controlPoint1: CGPointMake(55, 3.34), controlPoint2: CGPointMake(53.65, 2))
        bezier14Path.addLineToPoint(CGPointMake(13, 2))
        bezier14Path.addCurveToPoint(CGPointMake(10, 5), controlPoint1: CGPointMake(11.35, 2), controlPoint2: CGPointMake(10, 3.34))
        bezier14Path.addLineToPoint(CGPointMake(10, 26.43))
        bezier14Path.addCurveToPoint(CGPointMake(13, 29.43), controlPoint1: CGPointMake(10, 28.09), controlPoint2: CGPointMake(11.35, 29.43))
        bezier14Path.addLineToPoint(CGPointMake(25.58, 29.43))
        bezier14Path.addLineToPoint(CGPointMake(25.58, 38))
        bezier14Path.addLineToPoint(CGPointMake(35.67, 29.43))
        bezier14Path.closePath()
        GMTStyleKit.textBlue.setFill()
        bezier14Path.fill()


        CGContextEndTransparencyLayer(context)
        CGContextRestoreGState(context)


        CGContextEndTransparencyLayer(context)
        CGContextRestoreGState(context)


        //// Group 9
        CGContextSaveGState(context)
        CGContextBeginTransparencyLayer(context, nil)

        //// Clip Clip 9
        let clip9Path = UIBezierPath()
        clip9Path.moveToPoint(CGPointMake(35.67, 29.43))
        clip9Path.addLineToPoint(CGPointMake(52, 29.43))
        clip9Path.addCurveToPoint(CGPointMake(55, 26.43), controlPoint1: CGPointMake(53.65, 29.43), controlPoint2: CGPointMake(55, 28.09))
        clip9Path.addLineToPoint(CGPointMake(55, 5))
        clip9Path.addCurveToPoint(CGPointMake(52, 2), controlPoint1: CGPointMake(55, 3.34), controlPoint2: CGPointMake(53.65, 2))
        clip9Path.addLineToPoint(CGPointMake(13, 2))
        clip9Path.addCurveToPoint(CGPointMake(10, 5), controlPoint1: CGPointMake(11.35, 2), controlPoint2: CGPointMake(10, 3.34))
        clip9Path.addLineToPoint(CGPointMake(10, 26.43))
        clip9Path.addCurveToPoint(CGPointMake(13, 29.43), controlPoint1: CGPointMake(10, 28.09), controlPoint2: CGPointMake(11.35, 29.43))
        clip9Path.addLineToPoint(CGPointMake(25.58, 29.43))
        clip9Path.addLineToPoint(CGPointMake(25.58, 38))
        clip9Path.addLineToPoint(CGPointMake(35.67, 29.43))
        clip9Path.closePath()
        clip9Path.usesEvenOddFillRule = true;

        clip9Path.addClip()


        //// Bezier 17 Drawing
        let bezier17Path = UIBezierPath()
        bezier17Path.moveToPoint(CGPointMake(35.67, 29.43))
        bezier17Path.addLineToPoint(CGPointMake(52, 29.43))
        bezier17Path.addCurveToPoint(CGPointMake(55, 26.43), controlPoint1: CGPointMake(53.65, 29.43), controlPoint2: CGPointMake(55, 28.09))
        bezier17Path.addLineToPoint(CGPointMake(55, 5))
        bezier17Path.addCurveToPoint(CGPointMake(52, 2), controlPoint1: CGPointMake(55, 3.34), controlPoint2: CGPointMake(53.65, 2))
        bezier17Path.addLineToPoint(CGPointMake(13, 2))
        bezier17Path.addCurveToPoint(CGPointMake(10, 5), controlPoint1: CGPointMake(11.35, 2), controlPoint2: CGPointMake(10, 3.34))
        bezier17Path.addLineToPoint(CGPointMake(10, 26.43))
        bezier17Path.addCurveToPoint(CGPointMake(13, 29.43), controlPoint1: CGPointMake(10, 28.09), controlPoint2: CGPointMake(11.35, 29.43))
        bezier17Path.addLineToPoint(CGPointMake(25.58, 29.43))
        bezier17Path.addLineToPoint(CGPointMake(25.58, 38))
        bezier17Path.addLineToPoint(CGPointMake(35.67, 29.43))
        bezier17Path.closePath()
        strokeColor.setStroke()
        bezier17Path.lineWidth = 2
        bezier17Path.stroke()


        CGContextEndTransparencyLayer(context)
        CGContextRestoreGState(context)


        //// Bezier 19 Drawing
        let bezier19Path = UIBezierPath()
        bezier19Path.moveToPoint(CGPointMake(24.5, 15.5))
        bezier19Path.addLineToPoint(CGPointMake(41.62, 15.5))
        bezier19Path.lineCapStyle = .Square;

        strokeColor.setStroke()
        bezier19Path.lineWidth = 1
        bezier19Path.stroke()


        //// Bezier 20 Drawing
        let bezier20Path = UIBezierPath()
        bezier20Path.moveToPoint(CGPointMake(32.5, 8.5))
        bezier20Path.addLineToPoint(CGPointMake(32.5, 22.54))
        bezier20Path.lineCapStyle = .Square;

        strokeColor.setStroke()
        bezier20Path.lineWidth = 1
        bezier20Path.stroke()
    }

    public class func drawAddMediaButton() {
        //// Color Declarations
        let fillColor2 = UIColor(red: 0.365, green: 0.518, blue: 0.659, alpha: 1.000)

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.moveToPoint(CGPointMake(12.7, 5.35))
        bezierPath.addLineToPoint(CGPointMake(11.29, 5.35))
        bezierPath.addLineToPoint(CGPointMake(11.29, 11.29))
        bezierPath.addLineToPoint(CGPointMake(5.35, 11.29))
        bezierPath.addLineToPoint(CGPointMake(5.35, 12.7))
        bezierPath.addLineToPoint(CGPointMake(11.29, 12.7))
        bezierPath.addLineToPoint(CGPointMake(11.29, 18.64))
        bezierPath.addLineToPoint(CGPointMake(12.7, 18.64))
        bezierPath.addLineToPoint(CGPointMake(12.7, 12.7))
        bezierPath.addLineToPoint(CGPointMake(18.64, 12.7))
        bezierPath.addLineToPoint(CGPointMake(18.64, 11.29))
        bezierPath.addLineToPoint(CGPointMake(12.7, 11.29))
        bezierPath.addLineToPoint(CGPointMake(12.7, 5.35))
        bezierPath.closePath()
        bezierPath.usesEvenOddFillRule = true;

        fillColor2.setFill()
        bezierPath.fill()


        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalInRect: CGRectMake(0.5, 0.5, 23, 23))
        GMTStyleKit.textBlue.setStroke()
        ovalPath.lineWidth = 1
        ovalPath.stroke()
    }

    public class func drawSendButtonIcon() {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let fillColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)

        //// Group
        CGContextSaveGState(context)
        CGContextBeginTransparencyLayer(context, nil)

        //// Clip Clip
        let clipPath = UIBezierPath()
        clipPath.moveToPoint(CGPointMake(22.93, 9.79))
        clipPath.addLineToPoint(CGPointMake(22.93, 9.8))
        clipPath.addLineToPoint(CGPointMake(0.57, 18.8))
        clipPath.addLineToPoint(CGPointMake(0.56, 18.8))
        clipPath.addLineToPoint(CGPointMake(0.56, 18.8))
        clipPath.addCurveToPoint(CGPointMake(0.12, 18.71), controlPoint1: CGPointMake(0.42, 18.86), controlPoint2: CGPointMake(0.24, 18.83))
        clipPath.addCurveToPoint(CGPointMake(0.03, 18.26), controlPoint1: CGPointMake(-0, 18.59), controlPoint2: CGPointMake(-0.03, 18.41))
        clipPath.addLineToPoint(CGPointMake(0.03, 18.26))
        clipPath.addLineToPoint(CGPointMake(3.74, 10.24))
        clipPath.addLineToPoint(CGPointMake(14.43, 9.78))
        clipPath.addLineToPoint(CGPointMake(14.43, 9.02))
        clipPath.addLineToPoint(CGPointMake(3.75, 8.57))
        clipPath.addLineToPoint(CGPointMake(0.03, 0.57))
        clipPath.addLineToPoint(CGPointMake(0.03, 0.57))
        clipPath.addCurveToPoint(CGPointMake(0.12, 0.12), controlPoint1: CGPointMake(-0.03, 0.42), controlPoint2: CGPointMake(-0, 0.24))
        clipPath.addCurveToPoint(CGPointMake(0.56, 0.03), controlPoint1: CGPointMake(0.24, -0), controlPoint2: CGPointMake(0.42, -0.03))
        clipPath.addLineToPoint(CGPointMake(0.56, 0.03))
        clipPath.addLineToPoint(CGPointMake(0.56, 0.03))
        clipPath.addLineToPoint(CGPointMake(0.56, 0.03))
        clipPath.addLineToPoint(CGPointMake(22.93, 9.04))
        clipPath.addLineToPoint(CGPointMake(22.93, 9.04))
        clipPath.addCurveToPoint(CGPointMake(23.07, 9.13), controlPoint1: CGPointMake(22.98, 9.06), controlPoint2: CGPointMake(23.03, 9.09))
        clipPath.addCurveToPoint(CGPointMake(23.07, 9.71), controlPoint1: CGPointMake(23.23, 9.29), controlPoint2: CGPointMake(23.23, 9.55))
        clipPath.addCurveToPoint(CGPointMake(22.93, 9.79), controlPoint1: CGPointMake(23.03, 9.75), controlPoint2: CGPointMake(22.98, 9.77))
        clipPath.closePath()
        clipPath.usesEvenOddFillRule = true;

        clipPath.addClip()


        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRectMake(-5, -5.03, 33.2, 28.85))
        fillColor.setFill()
        rectanglePath.fill()


        CGContextEndTransparencyLayer(context)
        CGContextRestoreGState(context)
    }

    public class func drawCloseMediaButton() {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let fillColor2 = UIColor(red: 0.365, green: 0.518, blue: 0.659, alpha: 1.000)

        //// Bezier Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, 12, 12)
        CGContextRotateCTM(context, -45 * CGFloat(M_PI) / 180)

        let bezierPath = UIBezierPath()
        bezierPath.moveToPoint(CGPointMake(0.71, -6.64))
        bezierPath.addLineToPoint(CGPointMake(-0.71, -6.64))
        bezierPath.addLineToPoint(CGPointMake(-0.71, -0.71))
        bezierPath.addLineToPoint(CGPointMake(-6.64, -0.71))
        bezierPath.addLineToPoint(CGPointMake(-6.64, 0.71))
        bezierPath.addLineToPoint(CGPointMake(-0.71, 0.71))
        bezierPath.addLineToPoint(CGPointMake(-0.71, 6.64))
        bezierPath.addLineToPoint(CGPointMake(0.71, 6.64))
        bezierPath.addLineToPoint(CGPointMake(0.71, 0.71))
        bezierPath.addLineToPoint(CGPointMake(6.64, 0.71))
        bezierPath.addLineToPoint(CGPointMake(6.64, -0.71))
        bezierPath.addLineToPoint(CGPointMake(0.71, -0.71))
        bezierPath.addLineToPoint(CGPointMake(0.71, -6.64))
        bezierPath.closePath()
        bezierPath.usesEvenOddFillRule = true;

        fillColor2.setFill()
        bezierPath.fill()

        CGContextRestoreGState(context)


        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalInRect: CGRectMake(0.5, 0.5, 23, 23))
        GMTStyleKit.textBlue.setStroke()
        ovalPath.lineWidth = 1
        ovalPath.stroke()
    }

    public class func drawBackChevron() {
        //// Color Declarations
        let fillColor4 = UIColor(red: 0.826, green: 0.826, blue: 0.826, alpha: 1.000)

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.moveToPoint(CGPointMake(0, 10.5))
        bezierPath.addLineToPoint(CGPointMake(10.5, 0))
        bezierPath.addLineToPoint(CGPointMake(12.5, 2))
        bezierPath.addLineToPoint(CGPointMake(4, 10.5))
        bezierPath.addLineToPoint(CGPointMake(12.5, 19))
        bezierPath.addLineToPoint(CGPointMake(10.5, 21))
        bezierPath.addLineToPoint(CGPointMake(0, 10.5))
        bezierPath.closePath()
        bezierPath.usesEvenOddFillRule = true;

        fillColor4.setFill()
        bezierPath.fill()
    }

    public class func drawInnerShadowRect(rectSize rectSize: CGSize = CGSizeMake(375, 211)) {

        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// ShadowRectangle Drawing
        let shadowRectanglePath = UIBezierPath(rect: CGRectMake(0, 0, rectSize.width, rectSize.height))
        UIColor.clearColor().setFill()
        shadowRectanglePath.fill()

        ////// ShadowRectangle Inner Shadow
        CGContextSaveGState(context)
        CGContextClipToRect(context, shadowRectanglePath.bounds)
        CGContextSetShadow(context, CGSizeMake(0, 0), 0)
        CGContextSetAlpha(context, CGColorGetAlpha((GMTStyleKit.subtleShadow.shadowColor as! UIColor).CGColor))
        CGContextBeginTransparencyLayer(context, nil)
        let shadowRectangleOpaqueShadow = (GMTStyleKit.subtleShadow.shadowColor as! UIColor).colorWithAlphaComponent(1)
        CGContextSetShadowWithColor(context, GMTStyleKit.subtleShadow.shadowOffset, GMTStyleKit.subtleShadow.shadowBlurRadius, shadowRectangleOpaqueShadow.CGColor)
        CGContextSetBlendMode(context, .SourceOut)
        CGContextBeginTransparencyLayer(context, nil)

        shadowRectangleOpaqueShadow.setFill()
        shadowRectanglePath.fill()

        CGContextEndTransparencyLayer(context)
        CGContextEndTransparencyLayer(context)
        CGContextRestoreGState(context)
    }

    //// Generated Images

    public class func imageOfAvatar(initials initials: String = "GMT", avatarSize: CGSize = CGSizeMake(54, 54)) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSizeMake(54, 54), false, 0)
            GMTStyleKit.drawAvatar(initials: initials, avatarSize: avatarSize)

        let imageOfAvatar = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfAvatar
    }

    public class var imageOfCreateGroup: UIImage {
        if Cache.imageOfCreateGroup != nil {
            return Cache.imageOfCreateGroup!
        }

        UIGraphicsBeginImageContextWithOptions(CGSizeMake(59, 50), false, 0)
            GMTStyleKit.drawCreateGroup()

        Cache.imageOfCreateGroup = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return Cache.imageOfCreateGroup!
    }

    public class var imageOfAddMediaButton: UIImage {
        if Cache.imageOfAddMediaButton != nil {
            return Cache.imageOfAddMediaButton!
        }

        UIGraphicsBeginImageContextWithOptions(CGSizeMake(24, 24), false, 0)
            GMTStyleKit.drawAddMediaButton()

        Cache.imageOfAddMediaButton = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return Cache.imageOfAddMediaButton!
    }

    public class var imageOfSendButtonIcon: UIImage {
        if Cache.imageOfSendButtonIcon != nil {
            return Cache.imageOfSendButtonIcon!
        }

        UIGraphicsBeginImageContextWithOptions(CGSizeMake(23, 19), false, 0)
            GMTStyleKit.drawSendButtonIcon()

        Cache.imageOfSendButtonIcon = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return Cache.imageOfSendButtonIcon!
    }

    public class var imageOfCloseMediaButton: UIImage {
        if Cache.imageOfCloseMediaButton != nil {
            return Cache.imageOfCloseMediaButton!
        }

        UIGraphicsBeginImageContextWithOptions(CGSizeMake(24, 24), false, 0)
            GMTStyleKit.drawCloseMediaButton()

        Cache.imageOfCloseMediaButton = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return Cache.imageOfCloseMediaButton!
    }

    public class var imageOfBackChevron: UIImage {
        if Cache.imageOfBackChevron != nil {
            return Cache.imageOfBackChevron!
        }

        UIGraphicsBeginImageContextWithOptions(CGSizeMake(13, 21), false, 0)
            GMTStyleKit.drawBackChevron()

        Cache.imageOfBackChevron = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return Cache.imageOfBackChevron!
    }

    //// Customization Infrastructure

    @IBOutlet var createGroupTargets: [AnyObject]! {
        get { return Cache.createGroupTargets }
        set {
            Cache.createGroupTargets = newValue
            for target: AnyObject in newValue {
                target.performSelector(#selector(CIImageAccumulator.setImage(_:)), withObject: GMTStyleKit.imageOfCreateGroup)
            }
        }
    }

    @IBOutlet var addMediaButtonTargets: [AnyObject]! {
        get { return Cache.addMediaButtonTargets }
        set {
            Cache.addMediaButtonTargets = newValue
            for target: AnyObject in newValue {
                target.performSelector(#selector(CIImageAccumulator.setImage(_:)), withObject: GMTStyleKit.imageOfAddMediaButton)
            }
        }
    }

    @IBOutlet var sendButtonIconTargets: [AnyObject]! {
        get { return Cache.sendButtonIconTargets }
        set {
            Cache.sendButtonIconTargets = newValue
            for target: AnyObject in newValue {
                target.performSelector(#selector(CIImageAccumulator.setImage(_:)), withObject: GMTStyleKit.imageOfSendButtonIcon)
            }
        }
    }

    @IBOutlet var closeMediaButtonTargets: [AnyObject]! {
        get { return Cache.closeMediaButtonTargets }
        set {
            Cache.closeMediaButtonTargets = newValue
            for target: AnyObject in newValue {
                target.performSelector(#selector(CIImageAccumulator.setImage(_:)), withObject: GMTStyleKit.imageOfCloseMediaButton)
            }
        }
    }

    @IBOutlet var backChevronTargets: [AnyObject]! {
        get { return Cache.backChevronTargets }
        set {
            Cache.backChevronTargets = newValue
            for target: AnyObject in newValue {
                target.performSelector(#selector(CIImageAccumulator.setImage(_:)), withObject: GMTStyleKit.imageOfBackChevron)
            }
        }
    }

}



extension UIColor {
    func colorWithHue(newHue: CGFloat) -> UIColor {
        var saturation: CGFloat = 1.0, brightness: CGFloat = 1.0, alpha: CGFloat = 1.0
        self.getHue(nil, saturation: &saturation, brightness: &brightness, alpha: &alpha)
        return UIColor(hue: newHue, saturation: saturation, brightness: brightness, alpha: alpha)
    }
    func colorWithSaturation(newSaturation: CGFloat) -> UIColor {
        var hue: CGFloat = 1.0, brightness: CGFloat = 1.0, alpha: CGFloat = 1.0
        self.getHue(&hue, saturation: nil, brightness: &brightness, alpha: &alpha)
        return UIColor(hue: hue, saturation: newSaturation, brightness: brightness, alpha: alpha)
    }
    func colorWithBrightness(newBrightness: CGFloat) -> UIColor {
        var hue: CGFloat = 1.0, saturation: CGFloat = 1.0, alpha: CGFloat = 1.0
        self.getHue(&hue, saturation: &saturation, brightness: nil, alpha: &alpha)
        return UIColor(hue: hue, saturation: saturation, brightness: newBrightness, alpha: alpha)
    }
    func colorWithAlpha(newAlpha: CGFloat) -> UIColor {
        var hue: CGFloat = 1.0, saturation: CGFloat = 1.0, brightness: CGFloat = 1.0
        self.getHue(&hue, saturation: &saturation, brightness: &brightness, alpha: nil)
        return UIColor(hue: hue, saturation: saturation, brightness: brightness, alpha: newAlpha)
    }
    func colorWithHighlight(highlight: CGFloat) -> UIColor {
        var red: CGFloat = 1.0, green: CGFloat = 1.0, blue: CGFloat = 1.0, alpha: CGFloat = 1.0
        self.getRed(&red, green: &green, blue: &blue, alpha: &alpha)
        return UIColor(red: red * (1-highlight) + highlight, green: green * (1-highlight) + highlight, blue: blue * (1-highlight) + highlight, alpha: alpha * (1-highlight) + highlight)
    }
    func colorWithShadow(shadow: CGFloat) -> UIColor {
        var red: CGFloat = 1.0, green: CGFloat = 1.0, blue: CGFloat = 1.0, alpha: CGFloat = 1.0
        self.getRed(&red, green: &green, blue: &blue, alpha: &alpha)
        return UIColor(red: red * (1-shadow), green: green * (1-shadow), blue: blue * (1-shadow), alpha: alpha * (1-shadow) + shadow)
    }
}



extension NSShadow {
    convenience init(color: AnyObject!, offset: CGSize, blurRadius: CGFloat) {
        self.init()
        self.shadowColor = color
        self.shadowOffset = offset
        self.shadowBlurRadius = blurRadius
    }
}
